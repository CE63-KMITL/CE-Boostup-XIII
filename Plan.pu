@startuml global

left to right direction
hide circle
skinparam BoxPadding 50
skinparam linetype ortho
skinparam Nodesep 100

package "Front" {

     class "Login" as Front_Login {
          Store Token in Session
     }

     metaclass Menu {

     }

     Front_Login -d-> Menu : After login

     class "Problem List (In menu)" as Front_Problem {

     }

     Front_Problem -u-|> Menu

     class "Leaderboard (In menu)" as Front_Leaderboard{

     }

     Front_Leaderboard -u-|> Menu

     class "Score house (In menu)" as Front_Score{

     }

     Front_Score -u-|> Menu

     class "Solve problem / Coding" as Front_Coding{

     }

     class "Create problem" as Front_Create_Problem{

     }

     class "Setting" as Front_Setting{

     }

     Front_Problem -d-> Front_Coding
     
     Menu -l-> Front_Create_Problem : ปุ่มกดให้ไปหน้าสร้างโจทย์
     Menu -l-> Front_Setting : หน้าตั้งค่า
}

package "Back" {
     class "User" as Back_User {
          + Search()
          + Get_Role()
          + Get_User(User.ID)
     }

     class "Problem" as Back_Problem{
          + Search()
          + Create_Problem(Problem_Data) : Problem.ID;
          + Delete_Problem(Problem.ID) : boolean;
     }

     class "Score" as Back_Score {
          + Change(User.ID, Amount)
          + Set(User.ID, Amount)
          + Get_Logs(User.ID)
          + Get_Leaderboard(Page   )
     }

     class "Authenticator" as Back_Authenticator {
          + Check_Valid(Email, Password) : Token.ID;
          + Check_Valid_Token(Token.ID) : boolean;
          + Forget_Password(Email)
     }

     class "Run_Code" as Back_Run_Code{
          + Run_Code(input, code, timeout)
     }

     class "Email" as Back_Email{
          + Send(Email,Content)
     }

     Back_Authenticator -l-> Back_Email : Send Forget Password Email
     Back_Score -l- Back_User : User's Score
}

' class "Compiler" as Compiler {
     
' }

package "Database" {

     class "Data" as Data {
          Prolems : Problem[]
          Users : User[]
     }

     struct "Problem" {
          ID: uuid;

		Title: string;
		Author: User.ID;
		Description?: string;

		Default_Code?: string;
		Difficulty: 0.5 | 1 | 1.5 | 2 | 2.5 | 3 | 3.5 | 4 | 4.5 | 5;
		Tags?: string[];

          Status?: "Published" | "Needs Review" | "Rejected";
     }

     Data o-d- "Problem" : Store Problems

     class "User" as Data_Users {
          ID: uuid;
          Student_ID: string;
          Token: Token[];

		Name: string;
		Role: "Member" | "Admin" | "Dev";
          Score: number;
          Score_Logs: Score_Log[];

		Email: string;
		Password: string;

          Problems : Problem_User[];
     }

     struct Score_Log {
          Amount : number;
          By : User;
          Date: Date;
     }
     Score_Log -lo Data_Users
     Score_Log -> Data_Users

     struct Token {
          ID : string;
          Date : Date;
     }

     Token -lo Data_Users
     Data o-d- Data_Users : Store Users

     struct "Problem_User" {
          Problem_ID : Problem.ID
          Code : string
          Status: "Done" | "In Progress";
     }
     
     Data_Users o-d- "Problem_User"
}

'Front-end
Front_Login <-d-> Back_Authenticator : Login

Front_Leaderboard <-d-> Back_Score : Get Leaderboard score

Front_Create_Problem <-d-> Back_Run_Code : Run test code
Front_Create_Problem -d-> Back_Problem : send problem data

Front_Coding <-u-> Back_Run_Code : Run code

'Back-end
Back_Run_Code -d-> Compiler : HTTP Request

Back_User <-d-> Data_Users
Back_Authenticator -[dashed]- Token

Back_Score <-> Data_Users

@enduml
